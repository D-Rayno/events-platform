# ============================================
# Docker Compose - Production Ready
# ============================================

services:
  # ============================================
  # MySQL Database
  # ============================================
  db:
    image: mysql
    container_name: g-agency-db
    restart: always
    env_file: .env.docker
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u ${DB_USER} -p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============================================
  # Typesense Search Engine
  # ============================================
  typesense:
    build:
      context: .
      dockerfile: Dockerfile.typesense
    image: g-agency-typesense:custom
    restart: unless-stopped
    container_name: g-agency-typesense
    env_file: .env.docker
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
    ports:
      - "${TYPESENSE_PORT:-8108}:8108"
    volumes:
      - typesense_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      --data-dir /data 
      --api-key=${TYPESENSE_API_KEY} 
      --enable-cors

  # ============================================
  # AdonisJS Application
  # ============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    container_name: g-agency-app
    restart: unless-stopped
    environment:
      # Core settings
      NODE_ENV: production
      PORT: 10000
      HOST: 0.0.0.0
      APP_KEY: ${APP_KEY}
      APP_URL: ${APP_URL:-http://localhost:3333}
      
      # Database
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      
      # Typesense
      TYPESENSE_ENABLED: ${TYPESENSE_ENABLED:-true}
      TYPESENSE_HOST: typesense
      TYPESENSE_PORT: 8108
      TYPESENSE_PROTOCOL: http
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      
      # Session & Auth
      SESSION_DRIVER: ${SESSION_DRIVER:-cookie}
      ADMIN_API_TOKEN: ${ADMIN_API_TOKEN}
      
      # Mail (optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS:-noreply@yourdomain.com}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME:-G-Agency Events}
      
      # Storage
      DRIVE_DISK: ${DRIVE_DISK:-fs}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${PORT:-3333}:10000"
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./logs:/app/logs
      - app_tmp:/app/tmp
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      typesense:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:10000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

# ============================================
# Networks
# ============================================
networks:
  app-network:
    driver: bridge
    name: g-agency-network

# ============================================
# Volumes
# ============================================
volumes:
  mysql_data:
    name: g-agency-mysql-data
  typesense_data:
    name: g-agency-typesense-data
  app_tmp:
    name: g-agency-app-tmp